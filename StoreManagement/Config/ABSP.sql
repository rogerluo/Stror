SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

IF OBJECT_ID(N'DBO.USERS', N'U') IS NOT NULL
DROP TABLE DBO.USERS
GO

-- 670B14728AD9902AECBA32E22FA4F6BD for 000000
CREATE TABLE DBO.USERS (
	ID INT IDENTITY(1,1) PRIMARY KEY,
	USERNAME NVARCHAR(20) UNIQUE NOT NULL,
	USERPWD VARCHAR(32) NOT NULL,
	AUTHORITY BIGINT NOT NULL,
	LASTACCESS DATETIME,
	DEPARTMENTID INT,
	POSITIONID INT,
)
GO

--插入一条缺省的最高账号进入
INSERT INTO DBO.USERS (USERNAME, USERPWD, AUTHORITY, LASTACCESS) VALUES (N'管理员', '670B14728AD9902AECBA32E22FA4F6BD', 4294967295, GETDATE())
GO

IF OBJECT_ID(N'DBO.ISUSER', N'P') IS NOT NULL
DROP PROCEDURE DBO.ISUSER
GO

CREATE PROCEDURE DBO.ISUSER (@RET INT OUTPUT, @USERNAME NVARCHAR(20), @PASSWORD VARCHAR(32))
AS
BEGIN
	SET NOCOUNT OFF
	SET @RET = 0
	SELECT @RET = (SELECT ID FROM DBO.USERS WHERE USERNAME=@USERNAME AND USERPWD=@PASSWORD)
	--IF EXISTS(SELECT USERNAME FROM DBO.USERS WHERE USERNAME = @USERNAME AND USERPWD = @PASSWORD)
	--	SET @RET=1
	--ELSE
	--	SET @RET=0	
END
GO

--修改密码
IF OBJECT_ID(N'DBO.CHANGEPWD', N'P') IS NOT NULL
DROP PROCEDURE DBO.CHANGEPWD
GO

CREATE PROCEDURE DBO.CHANGEPWD (@RET INT OUT, @ID INT, @PWD VARCHAR(32))
AS
BEGIN
	SET NOCOUNT OFF
	IF EXISTS (SELECT ID FROM DBO.USERS WHERE ID=@ID)
	BEGIN
		UPDATE DBO.USERS SET USERPWD = @PWD WHERE ID=@ID
		SET @RET = 1
	END
END
GO

--关键字表
IF OBJECT_ID(N'DBO.T_KEYWORD', N'U') IS NOT NULL
DROP TABLE DBO.T_KEYWORD
GO

CREATE TABLE DBO.T_KEYWORD
(
	KEYWORD_ID INT IDENTITY(1,1) NOT NULL
	, KEYWORD_NAME NVARCHAR(10) NOT NULL
	, CONSTRAINT CK_KEYWORD_NAME
		CHECK (LEN(KEYWORD_NAME) <= 5)
	, CONSTRAINT UK_KEYWORD_NAME
		UNIQUE (KEYWORD_NAME)
	, CONSTRAINT PK_KEYWORD_ID
		PRIMARY KEY (KEYWORD_ID)
)
GO

INSERT INTO DBO.T_KEYWORD (KEYWORD_NAME) VALUES (N'商品编号');
INSERT INTO DBO.T_KEYWORD (KEYWORD_NAME) VALUES (N'商品条形码');
INSERT INTO DBO.T_KEYWORD (KEYWORD_NAME) VALUES (N'颜色');
INSERT INTO DBO.T_KEYWORD (KEYWORD_NAME) VALUES (N'尺寸');
INSERT INTO DBO.T_KEYWORD (KEYWORD_NAME) VALUES (N'季节');
INSERT INTO DBO.T_KEYWORD (KEYWORD_NAME) VALUES (N'品牌');
INSERT INTO DBO.T_KEYWORD (KEYWORD_NAME) VALUES (N'材料');
GO

--关键字存储过程
IF OBJECT_ID(N'DBO.SP_GETKEYWORD', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETKEYWORD;
GO

CREATE PROCEDURE DBO.SP_GETKEYWORD
AS
SELECT KEYWORD_ID, KEYWORD_NAME FROM DBO.T_KEYWORD ORDER BY KEYWORD_ID ASC;
GO

--是否关键字
IF OBJECT_ID(N'DBO.FN_ISKEYWORD', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_ISKEYWORD;
GO

CREATE FUNCTION DBO.FN_ISKEYWORD (@KEYWORD NVARCHAR(10) = '')
RETURNS INT
AS
BEGIN 
	SET @KEYWORD = LTRIM(@KEYWORD)
	SET @KEYWORD = RTRIM(@KEYWORD)
	IF LEN(@KEYWORD) = 0 
		RETURN 0
	IF NOT EXISTS (SELECT KEYWORD_ID FROM DBO.T_KEYWORD WHERE KEYWORD_NAME = @KEYWORD)
		RETURN 0
	RETURN 1
END
GO

--条码表
IF OBJECT_ID(N'DBO.T_BARCODEFMT', N'U') IS NOT NULL
DROP TABLE DBO.T_BARCODEFMT;
GO

CREATE TABLE DBO.T_BARCODEFMT (
	BARCODEFMT_ID INT IDENTITY NOT NULL,
	BARCODEFMT_NAME NVARCHAR(50) UNIQUE NOT NULL,
	CONSTRAINT PK_BARCODEFMT_ID
		PRIMARY KEY (BARCODEFMT_ID)
)
GO

--判断是否存在该条码格式
IF OBJECT_ID(N'DBO.FN_HASBARCODEFMT_BY_NAME', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASBARCODEFMT_BY_NAME;
GO

CREATE FUNCTION DBO.FN_HASBARCODEFMT_BY_NAME (@BARCODEFMT NVARCHAR(50))
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT BARCODEFMT_ID FROM DBO.T_BARCODEFMT WHERE BARCODEFMT_NAME = @BARCODEFMT)
		RETURN 1;
	RETURN 0;
END
GO

IF OBJECT_ID(N'DBO.FN_HASBARCODEFMT_BY_ID', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASBARCODEFMT_BY_ID;
GO

CREATE FUNCTION DBO.FN_HASBARCODEFMT_BY_ID (@ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT BARCODEFMT_ID FROM DBO.T_BARCODEFMT WHERE BARCODEFMT_ID = @ID)
		RETURN 1;
	RETURN 0;
END
GO

--条码表查询
IF OBJECT_ID(N'DBO.SP_GETBARCODEFMT', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETBARCODEFMT;
GO

CREATE PROCEDURE DBO.SP_GETBARCODEFMT
AS
SELECT BARCODEFMT_ID, BARCODEFMT_NAME FROM DBO.T_BARCODEFMT ORDER BY BARCODEFMT_ID ASC;
GO

--条码表插入
IF OBJECT_ID(N'DBO.SP_ADDBARCODEFMT', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDBARCODEFMT;
GO

CREATE PROCEDURE DBO.SP_ADDBARCODEFMT (@FMT NVARCHAR(50))
AS
BEGIN
	SET NOCOUNT OFF
	SET @FMT = LTRIM(@FMT)
	SET @FMT = RTRIM(@FMT)
	IF LEN(@FMT) = 0
		RETURN -1
	IF EXISTS (SELECT BARCODEFMT_NAME FROM DBO.T_BARCODEFMT WHERE BARCODEFMT_NAME=@FMT)
		RETURN -3;
	DECLARE @POS INT, @PREVPOS INT
	DECLARE @KEYWORD NVARCHAR(10)
	SET @PREVPOS = 1;
	SET @POS = CHARINDEX(N'-', @FMT, 0);
	WHILE @POS <> 0
	BEGIN
		SET @KEYWORD = SUBSTRING(@FMT, @PREVPOS, @POS - @PREVPOS);
		IF DBO.FN_ISKEYWORD(@KEYWORD) = 0
			RETURN -2;
		SET @PREVPOS = @POS + 1;
		SET @POS = CHARINDEX(N'-', @FMT, @PREVPOS);
	END
	SET @KEYWORD = SUBSTRING(@FMT, @PREVPOS, LEN(@FMT) - @POS);
	IF NOT EXISTS (SELECT KEYWORD_ID FROM DBO.T_KEYWORD WHERE KEYWORD_NAME = @KEYWORD)
		RETURN -2;
	INSERT INTO DBO.T_BARCODEFMT (BARCODEFMT_NAME) VALUES (@FMT)
	RETURN 1
END
GO

EXEC SP_ADDBARCODEFMT N'商品编号';
GO
EXEC SP_ADDBARCODEFMT N'商品编号-颜色';
GO
EXEC SP_ADDBARCODEFMT N'商品编号-尺寸';
GO
EXEC SP_ADDBARCODEFMT N'商品编号-颜色-尺寸';
GO
EXEC SP_ADDBARCODEFMT N'商品编号-尺寸-颜色';
GO

--条码表删除
IF OBJECT_ID(N'DBO.SP_DELBARCODEFMT_BY_NAME', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DELBARCODEFMT_BY_NAME;
GO

CREATE PROCEDURE DBO.SP_DELBARCODEFMT_BY_NAME (@FMT NVARCHAR(50))
AS
BEGIN
	SET NOCOUNT OFF
	IF LEN(@FMT) > 50
		RETURN -2;
	IF @FMT = N'商品编号'
		RETURN -3;
	IF NOT EXISTS (SELECT BARCODEFMT_ID FROM DBO.T_BARCODEFMT)
		RETURN -1;
	DELETE FROM DBO.T_BARCODEFMT WHERE BARCODEFMT_NAME=@FMT;
	RETURN 1;
END
GO

--商品季节
IF OBJECT_ID(N'DBO.T_SEASON', N'U') IS NOT NULL
DROP TABLE DBO.T_SEASON
GO

CREATE TABLE DBO.T_SEASON (
	SEASON_ID INT IDENTITY NOT NULL
	, SEASON_NAME NVARCHAR(20) NOT NULL
		CHECK (LEN(SEASON_NAME) <= 20)
	, CONSTRAINT PK_SEASON_ID
		PRIMARY KEY (SEASON_ID)
	, CONSTRAINT UK_SEASON_NAME
		UNIQUE (SEASON_NAME)
)
GO

--判断是否存在该季节
IF OBJECT_ID(N'DBO.FN_HASSEASSON_BY_NAME', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASSEASSON_BY_NAME;
GO

CREATE FUNCTION DBO.FN_HASSEASSON_BY_NAME (@SEASON NVARCHAR(20))
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT SEASON_ID FROM DBO.T_SEASON WHERE SEASON_NAME = @SEASON)
		RETURN 1;
	RETURN 0;
END
GO

IF OBJECT_ID(N'DBO.FN_HASSEASON_BY_ID', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASSEASON_BY_ID;
GO

CREATE FUNCTION DBO.FN_HASSEASON_BY_ID (@ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT SEASON_ID FROM DBO.T_SEASON WHERE SEASON_ID = @ID)
		RETURN 1;
	RETURN 0;
END
GO

--获取商品季节
IF OBJECT_ID(N'DBO.SP_GETSEASON', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETSEASON;
GO

CREATE PROCEDURE DBO.SP_GETSEASON
AS
SELECT SEASON_ID, SEASON_NAME FROM DBO.T_SEASONGROUP ORDER BY SEASON_ID;
GO

--添加商品季节
IF OBJECT_ID(N'DBO.SP_ADDSEASON', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDSEASON;
GO

CREATE PROCEDURE DBO.SP_ADDSEASON (@SEASON NVARCHAR(20))
AS
	SET NOCOUNT OFF
	IF LEN(@SEASON) > 20
		RETURN -2;
	IF EXISTS (SELECT SEASON_ID FROM DBO.T_SEASONGROUP WHERE SEASON_NAME=@SEASON)
		RETURN -1;
	INSERT INTO DBO.T_SEASONGROUP (SEASON_NAME) VALUES (@SEASON);
	RETURN 1;
GO

--删除商品季节
IF OBJECT_ID(N'DBO.SP_DELSEASON_BY_NAME', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DELSEASON_BY_NAME;
GO

CREATE PROCEDURE DBO.SP_DELSEASON_BY_NAME (@SEASON NVARCHAR(20))
AS
BEGIN
	SET NOCOUNT OFF
	IF NOT EXISTS (SELECT SEASON_ID FROM DBO.T_SEASONGROUP)
		RETURN -1;
	DELETE FROM DBO.T_SEASONGROUP WHERE SEASON_NAME=@SEASON;
	RETURN 1;
END
GO

--商品颜色
IF OBJECT_ID(N'DBO.T_COLOR', N'U') IS NOT NULL
DROP TABLE DBO.T_COLOR
GO

CREATE TABLE DBO.T_COLOR (
	COLOR_ID INT IDENTITY NOT NULL,
	COLOR_NAME NVARCHAR(20) NOT NULL
	, CONSTRAINT PK_COLOR_ID
		PRIMARY KEY (COLOR_ID)
	, CONSTRAINT UK_COLOR_NAME
		UNIQUE (COLOR_NAME)
)
GO

--判断是否存在该颜色
IF OBJECT_ID(N'DBO.FN_HASCOLOR_BY_NAME', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASCOLOR_BY_NAME;
GO

CREATE FUNCTION DBO.FN_HASCOLOR_BY_NAME (@COLOR NVARCHAR(20))
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT COLOR_ID FROM DBO.T_COLOR WHERE COLOR_NAME = @COLOR)
		RETURN 1;
	RETURN 0;
END
GO

IF OBJECT_ID(N'DBO.FN_HASCOLOR_BY_ID', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASCOLOR_BY_ID;
GO

CREATE FUNCTION DBO.FN_HASCOLOR_BY_ID (@ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT COLOR_ID FROM DBO.T_COLOR WHERE COLOR_ID = @ID)
		RETURN 1;
	RETURN 0;
END
GO

--获取商品颜色
IF OBJECT_ID(N'DBO.SP_GETCOLOR', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETCOLOR;
GO

CREATE PROCEDURE DBO.SP_GETCOLOR
AS
SELECT COLOR_ID, COLOR_NAME FROM DBO.T_COLOR ORDER BY COLOR_ID;
GO

--添加商品颜色
IF OBJECT_ID(N'DBO.SP_ADDCOLOR', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDCOLOR;
GO

CREATE PROCEDURE DBO.SP_ADDCOLOR (@COLOR NVARCHAR(20))
AS
	SET NOCOUNT OFF
	IF LEN(@COLOR) > 20
		RETURN -2;
	IF EXISTS (SELECT COLOR_ID FROM DBO.T_COLOR WHERE COLOR_NAME=@COLOR)
		RETURN -1;
	INSERT INTO DBO.T_COLOR (COLOR_NAME) VALUES (@COLOR);
	RETURN 1;
GO

--删除商品颜色
IF OBJECT_ID(N'DBO.SP_DELCOLOR_BY_NAME', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DELCOLOR_BY_NAME;
GO

CREATE PROCEDURE DBO.SP_DELCOLOR_BY_NAME (@COLOR NVARCHAR(20))
AS
BEGIN
	SET NOCOUNT OFF
	IF LEN(@COLOR) > 20
		RETURN -2;
	IF NOT EXISTS (SELECT COLOR_ID FROM DBO.T_COLOR WHERE COLOR_NAME=@COLOR)
		RETURN -1;
	DELETE FROM DBO.T_COLOR WHERE COLOR_ID=@COLOR;
	RETURN 1;
END
GO

--商品尺码
IF OBJECT_ID(N'DBO.T_SIZE', N'U') IS NOT NULL
DROP TABLE DBO.T_SIZE
GO

CREATE TABLE DBO.T_SIZE (
	SIZE_ID INT IDENTITY NOT NULL
	, SIZE_NAME NVARCHAR(20) NOT NULL
	, CONSTRAINT PK_SIZE_ID
		PRIMARY KEY (SIZE_ID)
	, CONSTRAINT UK_SIZE_NAME
		UNIQUE (SIZE_NAME)
)
GO

--判断是否存在该尺码
IF OBJECT_ID(N'DBO.FN_HASSIZE_BY_NAME', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASSIZE_BY_NAME;
GO

CREATE FUNCTION DBO.FN_HASSIZE_BY_NAME (@SIZE NVARCHAR(20))
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT SIZE_ID FROM DBO.T_SIZE WHERE SIZE_NAME = @SIZE)
		RETURN 1;
	RETURN 0;
END
GO

IF OBJECT_ID(N'DBO.FN_HASSIZE_BY_ID', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASSIZE_BY_ID;
GO

CREATE FUNCTION DBO.FN_HASSIZE_BY_ID (@ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT SIZE_ID FROM DBO.T_SIZE WHERE SIZE_ID = @ID)
		RETURN 1;
	RETURN 0;
END
GO

--获取商品尺码
IF OBJECT_ID(N'DBO.SP_GETSIZE', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETSIZE;
GO

CREATE PROCEDURE DBO.SP_GETSIZE
AS
SELECT SIZE_ID, SIZE_NAME FROM DBO.T_SIZE ORDER BY SIZE_ID;
GO

--添加商品尺码
IF OBJECT_ID(N'DBO.SP_ADDSIZE', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDSIZE;
GO

CREATE PROCEDURE DBO.SP_ADDSIZE (@SIZE NVARCHAR(20))
AS
	SET NOCOUNT OFF
	IF LEN(@SIZE) > 20
		RETURN -2;
	IF EXISTS (SELECT SIZE_ID FROM DBO.T_SIZE WHERE SIZE_NAME=@SIZE)
		RETURN -1;
	INSERT INTO DBO.T_SIZE (SIZE_NAME) VALUES (@SIZE);
	RETURN 1;
GO

--删除商品尺码
IF OBJECT_ID(N'DBO.SP_DELSIZE_BY_NAME', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DELSIZE_BY_NAME;
GO

CREATE PROCEDURE DBO.SP_DELSIZE_BY_NAME (@SIZE NVARCHAR(20))
AS
BEGIN
	SET NOCOUNT OFF
	IF LEN(@SIZE) > 20
		RETURN -2;
	IF NOT EXISTS (SELECT SIZE_ID FROM DBO.T_SIZE WHERE SIZE_NAME = @SIZE)
		RETURN -1;
	DELETE FROM DBO.T_SIZE WHERE SIZE_NAME=@SIZE;
	RETURN 1;
END
GO

--商品品牌
IF OBJECT_ID(N'DBO.T_BRAND', N'U') IS NOT NULL
DROP TABLE DBO.T_BRAND
GO

CREATE TABLE DBO.T_BRAND (
	BRAND_ID INT IDENTITY NOT NULL
	, BRAND_NAME NVARCHAR(20) NOT NULL
		CHECK (LEN(BRAND_NAME) <= 20)
	, CONSTRAINT PK_BRAND_ID
		PRIMARY KEY (BRAND_ID)
	, CONSTRAINT UK_BRAND_NAME
		UNIQUE (BRAND_NAME)
)
GO

--判断是否存在该品牌
IF OBJECT_ID(N'DBO.FN_HASBRAND_BY_NAME', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASBRAND_BY_NAME;
GO

CREATE FUNCTION DBO.FN_HASBRAND_BY_NAME (@BRAND NVARCHAR(20))
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT BRAND_ID FROM DBO.T_BRAND WHERE BRAND_NAME = @BRAND)
		RETURN 1;
	RETURN 0;
END
GO

IF OBJECT_ID(N'DBO.FN_HASBRAND_BY_ID', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASBRAND_BY_ID;
GO

CREATE FUNCTION DBO.FN_HASBRAND_BY_ID (@ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT BRAND_ID FROM DBO.T_BRAND WHERE BRAND_ID = @ID)
		RETURN 1;
	RETURN 0;
END
GO

--获取商品品牌
IF OBJECT_ID(N'DBO.SP_GETBRAND', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETBRAND;
GO

CREATE PROCEDURE DBO.SP_GETBRAND
AS
SELECT BRAND_ID, BRAND_NAME FROM DBO.T_BRAND ORDER BY BRAND_ID;
GO

--添加商品品牌
IF OBJECT_ID(N'DBO.SP_ADDBRAND', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDBRAND;
GO

CREATE PROCEDURE DBO.SP_ADDBRAND (@BRAND NVARCHAR(20))
AS
	SET NOCOUNT OFF
	IF LEN(@BRAND) > 20
		RETURN -2;
	IF EXISTS (SELECT BRAND_ID FROM DBO.T_BRAND WHERE BRAND_NAME=@BRAND)
		RETURN -1;
	INSERT INTO DBO.T_BRAND (BRAND_NAME) VALUES (@BRAND);
	RETURN 1;
GO

--删除商品品牌
IF OBJECT_ID(N'DBO.SP_DELBRAND_BY_NAME', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DELBRAND_BY_NAME;
GO

CREATE PROCEDURE DBO.SP_DELBRAND_BY_NAME (@BRAND NVARCHAR(20))
AS
BEGIN
	SET NOCOUNT OFF
	IF LEN(@BRAND) > 20
		RETURN -2;
	IF NOT EXISTS (SELECT BRAND_ID FROM DBO.T_BRAND WHERE BRAND_NAME = @BRAND)
		RETURN -1;
	DELETE FROM DBO.T_BRAND WHERE BRAND_NAME=@BRAND;
	RETURN 1;
END
GO

--商品材料
IF OBJECT_ID(N'DBO.T_STUFF', N'U') IS NOT NULL
DROP TABLE DBO.T_STUFF
GO

CREATE TABLE DBO.T_STUFF (
	STUFF_ID INT IDENTITY NOT NULL
	, STUFF_NAME NVARCHAR(20) NOT NULL
		CHECK (LEN(STUFF_NAME) <= 20)
	, CONSTRAINT PK_STUFF_ID
		PRIMARY KEY (STUFF_ID)
	, CONSTRAINT UK_STUFF_NAME
		UNIQUE (STUFF_NAME)
)
GO

--判断是否存在该材料
IF OBJECT_ID(N'DBO.FN_HASSTUFF_BY_NAME', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASSTUFF_BY_NAME;
GO

CREATE FUNCTION DBO.FN_HASSTUFF_BY_NAME (@STUFF NVARCHAR(20))
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT STUFF_ID FROM DBO.T_STUFF WHERE STUFF_NAME = @STUFF)
		RETURN 1;
	RETURN 0;
END
GO

IF OBJECT_ID(N'DBO.FN_HASSTUFF_BY_ID', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HASSTUFF_BY_ID;
GO

CREATE FUNCTION DBO.FN_HASSTUFF_BY_ID (@ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT STUFF_ID FROM DBO.T_STUFF WHERE STUFF_ID = @ID)
		RETURN 1;
	RETURN 0;
END
GO

--获取商品材料
IF OBJECT_ID(N'DBO.SP_GETSTUFF', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETSTUFF;
GO

CREATE PROCEDURE DBO.SP_GETSTUFF
AS
SELECT STUFF_ID, STUFF_NAME FROM DBO.T_STUFF ORDER BY STUFF_ID;
GO

--添加商品材料
IF OBJECT_ID(N'DBO.SP_ADDSTUFF', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDSTUFF;
GO

CREATE PROCEDURE DBO.SP_ADDSTUFF (@STUFF NVARCHAR(20))
AS
	SET NOCOUNT OFF
	IF LEN(@STUFF) > 20
		RETURN -2;
	IF EXISTS (SELECT STUFF_ID FROM DBO.T_STUFF WHERE STUFF_NAME=@STUFF)
		RETURN -1;
	INSERT INTO DBO.T_STUFF (STUFF_NAME) VALUES (@STUFF);
	RETURN 1;
GO

--删除商品材料
IF OBJECT_ID(N'DBO.SP_DELSTUFF_BY_NAME', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DELSTUFF_BY_NAME;
GO

CREATE PROCEDURE DBO.SP_DELSTUFF_BY_NAME (@STUFF NVARCHAR(20))
AS
BEGIN
	SET NOCOUNT OFF
	IF LEN(@STUFF) > 20
		RETURN -2;
	IF NOT EXISTS (SELECT STUFF_ID FROM DBO.T_STUFF WHERE STUFF_NAME = @STUFF)
		RETURN -1;
	DELETE FROM DBO.T_STUFF WHERE STUFF_NAME=@STUFF;
	RETURN 1;
END
GO

--商品文件夹
IF OBJECT_ID(N'DBO.T_GOODSFOLDER', N'U') IS NOT NULL
DROP TABLE DBO.T_GOODSFOLDER;
GO

CREATE TABLE DBO.T_GOODSFOLDER (
	GOODS_FLD_ID INT IDENTITY(1,1) NOT NULL
	, GOODS_FLD_NAME NVARCHAR(50) NOT NULL
	, GOODS_FLD_PARENT_ID INT NOT NULL
	, CONSTRAINT PK_GOODS_FLD_ID
		PRIMARY KEY (GOODS_FLD_ID)
	, CONSTRAINT UK_GOODS_FLD_NAME
		UNIQUE (GOODS_FLD_NAME)
)
GO

--判断商品分类
IF OBJECT_ID(N'DBO.FN_HASGOODSFOLDER_BY_NAME', N'FN') IS NOT NULL
DROP FUNCTION  DBO.FN_HASGOODSFOLDER_BY_NAME;
GO

CREATE FUNCTION DBO.FN_HASGOODSFOLDER_BY_NAME (@NAME NVARCHAR(50))
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT GOODS_FLD_ID FROM DBO.T_GOODSFOLDER WHERE GOODS_FLD_NAME=@NAME)
		RETURN 1;
	RETURN 0;
END
GO

IF OBJECT_ID(N'DBO.FN_HASGOODSFOLDER_BY_ID', N'FN') IS NOT NULL
DROP FUNCTION  DBO.FN_HASGOODSFOLDER_BY_ID;
GO

CREATE FUNCTION DBO.FN_HASGOODSFOLDER_BY_ID (@ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT GOODS_FLD_ID FROM DBO.T_GOODSFOLDER WHERE GOODS_FLD_ID=@ID)
		RETURN 1;
	RETURN 0;
END
GO

--查询所有商品分类
IF OBJECT_ID(N'DBO.SP_GETGOODSFOLDER', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETGOODSFOLDER;
GO

CREATE PROCEDURE DBO.SP_GETGOODSFOLDER
AS
SELECT * FROM DBO.T_GOODSFOLDER ORDER BY GOODS_FLD_ID;
GO

--增加商品分类
IF OBJECT_ID(N'DBO.SP_ADDGOODSFOLDER', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDGOODSFOLDER;
GO

CREATE PROCEDURE DBO.SP_ADDGOODSFOLDER (@FLD_NAME NVARCHAR(50), @PARENT_ID INT)
AS
BEGIN
	SET NOCOUNT OFF
	IF DBO.FN_HASGOODSFOLDER_BY_ID(@PARENT_ID) = 0 AND @PARENT_ID <> 0
		RETURN -1;
	IF DBO.FN_HASGOODSFOLDER_BY_NAME(@FLD_NAME) = 1
		RETURN -1;
	INSERT INTO DBO.T_GOODSFOLDER (GOODS_FLD_NAME, GOODS_FLD_PARENT_ID) VALUES (@FLD_NAME, @PARENT_ID);
	RETURN 1;
END
GO

EXEC DBO.SP_ADDGOODSFOLDER N'库存根目录', 0;
GO

--商品信息表
IF OBJECT_ID(N'DBO.T_GOODSINFO', N'U') IS NOT NULL
DROP TABLE DBO.T_GOODSINFO
GO

CREATE TABLE DBO.T_GOODSINFO (
	GOODS_ID BIGINT NOT NULL
	, GOODS_FLD_ID INT NOT NULL
	, GOODS_FULL_NAME NVARCHAR(50) NOT NULL
	, GOODS_ABBR_NAME NVARCHAR(20) NOT NULL
	, UNIT NVARCHAR(4) NOT NULL
	, BARCODE_ID VARCHAR(40) NOT NULL
	, EXPIRED_ON DATETIME NOT NULL
	, BARCODEFMT_ID INT NOT NULL DEFAULT 1
	, PRICE1 DECIMAL NOT NULL
	, PRICE2 DECIMAL NULL
	, PRICE3 DECIMAL NULL
	, SEASON_ID INT NULL
	, BRAND_ID INT NULL
	, STUFF_ID INT NULL
	, CONSTRAINT UK_GOODS_ID
		UNIQUE (GOODS_ID)
	, CONSTRAINT UK_BARCODE_ID
		UNIQUE (BARCODE_ID)
	, CONSTRAINT FK_GOODS_FLD_ID
		FOREIGN KEY (GOODS_FLD_ID)
			REFERENCES DBO.T_GOODSFOLDER(GOODS_FLD_ID)
			ON DELETE CASCADE
			ON UPDATE CASCADE
	, CONSTRAINT FK_BARCODEFMT_ID
		FOREIGN KEY (BARCODEFMT_ID)
			REFERENCES T_BARCODEFMT(BARCODEFMT_ID)
			ON DELETE NO ACTION
			ON UPDATE NO ACTION
	, CONSTRAINT FK_SEASON_ID
		FOREIGN KEY (SEASON_ID)
			REFERENCES DBO.T_SEASON(SEASON_ID)
			ON DELETE NO ACTION
			ON UPDATE NO ACTION
	, CONSTRAINT FK_BRAND_ID
		FOREIGN KEY (BRAND_ID)
			REFERENCES DBO.T_BRAND(BRAND_ID)
			ON DELETE NO ACTION
			ON UPDATE NO ACTION
	, CONSTRAINT FK_STUFF_ID
		FOREIGN KEY (STUFF_ID)
			REFERENCES DBO.T_STUFF(STUFF_ID)
			ON DELETE NO ACTION
			ON UPDATE NO ACTION
)
GO

--返回所有商品信息
IF OBJECT_ID(N'DBO.SP_GETGOODSINFO', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETGOODSINFO;
GO

CREATE PROCEDURE DBO.SP_GETGOODSINFO 
AS
SELECT * FROM DBO.T_GOODSINFO;
GO

--增加商品信息
IF OBJECT_ID(N'DBO.SP_ADDGOODSINFO', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADDGOODSINFO;
GO

CREATE PROCEDURE DBO.SP_ADDGOODSINFO 
(
	@GOODS_ID BIGINT
	, @GOODS_FLD_ID INT
	, @FULLNAME NVARCHAR(50)
	, @ABBRNAME NVARCHAR(20)
	, @UNIT NVARCHAR(4) 
	, @BARCODE_ID VARCHAR(40)
	, @EXPIRED_ON DATETIME 
	, @PRICE1 DECIMAL 
	, @PRICE2 DECIMAL = 0
	, @PRICE3 DECIMAL = 0
	, @BARCODEFMT_ID INT = 1
	, @SEASON_ID INT = NULL
	, @BRAND_ID INT = NULL
	, @STUFF_ID INT = NULL
) 
AS
BEGIN
	SET NOCOUNT OFF
	IF EXISTS (SELECT GOODS_ID FROM DBO.T_GOODSINFO WHERE GOODS_ID = @GOODS_ID OR BARCODE_ID = @BARCODE_ID)
		RETURN -1;
	IF DBO.FN_HASBARCODEFMT_BY_ID(@BARCODEFMT_ID) = 0
		RETURN -2;
	IF DBO.FN_HASSEASON_BY_ID(@SEASON_ID) = 0 AND @SEASON_ID <> NULL
		RETURN -2;
	IF DBO.FN_HASBRAND_BY_ID(@BRAND_ID) = 0 AND @BRAND_ID <> NULL
		RETURN -2;
	IF DBO.FN_HASSTUFF_BY_ID(@STUFF_ID) = 0 AND @STUFF_ID <> NULL
		RETURN -2;
	INSERT INTO T_GOODSINFO (
		  GOODS_ID
		, GOODS_FLD_ID
		, GOODS_FULL_NAME
		, GOODS_ABBR_NAME
		, UNIT
		, BARCODE_ID
		, EXPIRED_ON
		, PRICE1 
		, PRICE2
		, PRICE3
		, BARCODEFMT_ID
		, SEASON_ID
		, BRAND_ID 
		, STUFF_ID
	) VALUES (
		@GOODS_ID
		, @GOODS_FLD_ID
		, @FULLNAME
		, @ABBRNAME
		, @UNIT
		, @BARCODE_ID
		, @EXPIRED_ON
		, @PRICE1
		, @PRICE2
		, @PRICE3
		, @BARCODEFMT_ID
		, @SEASON_ID
		, @BRAND_ID
		, @STUFF_ID
	)	
END
GO

----删除商品信息
--IF OBJECT_ID(N'DBO.SP_DELGOODSINFO', N'P') IS NOT NULL
--DROP PROCEDURE DBO.SP_DELGOODSINFO;
--GO

--CREATE PROCEDURE DBO.SP_DELGOODSINFO (@GOODS_ID BIGINT)
--AS
--BEGIN
--	SET NOCOUNT OFF

--END
--GO

--商品尺寸映射表
IF OBJECT_ID(N'DBO.T_GOODS_SIZE_MAP', N'U') IS NOT NULL
DROP TABLE DBO.T_GOODS_SIZE_MAP;
GO

CREATE TABLE DBO.T_GOODS_SIZE_MAP
(
	GOODS_SIZE_ID INT IDENTITY(1,1) NOT NULL
	, GOODS_ID BIGINT NOT NULL
	, SIZE_ID INT NULL
	, CONSTRAINT PK_GOODS_SIZE_ID
		PRIMARY KEY (GOODS_SIZE_ID)
	, CONSTRAINT UK_GOODS_SIZE
		UNIQUE (GOODS_ID, SIZE_ID)
	, CONSTRAINT FK_GS_MAP_GOODS_ID
		FOREIGN KEY (GOODS_ID)
		REFERENCES DBO.T_GOODSINFO(GOODS_ID)
		ON DELETE CASCADE
		ON UPDATE CASCADE
	, CONSTRAINT FK_GS_MAP_SIZE_ID
		FOREIGN KEY (SIZE_ID)
		REFERENCES DBO.T_SIZE(SIZE_ID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
GO

--是否存在对应商品颜色
IF OBJECT_ID(N'DBO.FN_HAS_GOODS_SIZE', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HAS_GOODS_SIZE;
GO

CREATE FUNCTION DBO.FN_HAS_GOODS_SIZE (@GOODS_ID BIGINT, @SIZE_ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT GOODS_SIZE_ID FROM DBO.T_GOODS_SIZE_MAP WHERE GOODS_ID = @GOODS_ID AND SIZE_ID = @SIZE_ID)
		RETURN 1;
	RETURN 0;
END
GO

--插入指定商品尺寸映射表
IF OBJECT_ID(N'DBO.SP_ADD_GOODS_SIZE_MAP', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADD_GOODS_SIZE_MAP;
GO

CREATE PROCEDURE DBO.SP_ADD_GOODS_SIZE_MAP (@GOODS_ID BIGINT, @SIZESTR VARCHAR(100))
AS
BEGIN
	SET NOCOUNT OFF
	DECLARE @SIZE_ID INT, @PREVPOS INT, @POS INT
	SET @PREVPOS = 1;
	SET @POS = CHARINDEX(N'|', @SIZESTR, 0);
	WHILE @POS <> 0
	BEGIN
		SET @SIZE_ID = CAST(SUBSTRING(@SIZESTR, @PREVPOS, @POS - @PREVPOS) AS INT);
		IF DBO.FN_HASSIZE_BY_ID(@SIZE_ID) = 0
			RETURN -2;
		SET @PREVPOS = @POS + 1;
		SET @POS = CHARINDEX(N'|', @SIZESTR, @PREVPOS);
		IF DBO.FN_HAS_GOODS_SIZE(@GOODS_ID, @SIZE_ID) = 0
			INSERT INTO DBO.T_GOODS_SIZE_MAP (GOODS_ID, SIZE_ID) VALUES (@GOODS_ID, @SIZE_ID);
	END
	SET @SIZE_ID = CAST(SUBSTRING(@SIZESTR, @PREVPOS, LEN(@SIZESTR) - @POS) AS INT);
	IF DBO.FN_HASSIZE_BY_ID(@SIZE_ID) = 0
		RETURN -2;
	IF DBO.FN_HAS_GOODS_SIZE(@GOODS_ID, @SIZE_ID) = 0
		INSERT INTO DBO.T_GOODS_SIZE_MAP (GOODS_ID, SIZE_ID) VALUES (@GOODS_ID, @SIZE_ID);
	RETURN 1;
END
GO

--删除指定商品尺寸映射表
IF OBJECT_ID(N'DBO.SP_DEL_GOODS_SIZE_MAP', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DEL_GOODS_SIZE_MAP;
GO

CREATE PROCEDURE DBO.SP_DEL_GOODS_SIZE_MAP (@GOODS_ID BIGINT, @SIZESTR VARCHAR(100))
AS
BEGIN
	SET NOCOUNT OFF
	DECLARE @SIZE_ID INT, @PREVPOS INT, @POS INT
	SET @PREVPOS = 1;
	SET @POS = CHARINDEX(N'|', @SIZESTR, 0);
	WHILE @POS <> 0
	BEGIN
		SET @SIZE_ID = CAST(SUBSTRING(@SIZESTR, @PREVPOS, @POS - @PREVPOS) AS INT);
		IF DBO.FN_HASSIZE_BY_ID(@SIZE_ID) = 0
			RETURN -2;
		SET @PREVPOS = @POS + 1;
		SET @POS = CHARINDEX(N'|', @SIZESTR, @PREVPOS);
		IF DBO.FN_HAS_GOODS_SIZE(@GOODS_ID, @SIZE_ID) = 1
			DELETE FROM DBO.T_GOODS_SIZE_MAP WHERE GOODS_ID = @GOODS_ID AND SIZE_ID = @SIZE_ID;
	END
	SET @SIZE_ID = CAST(SUBSTRING(@SIZESTR, @PREVPOS, LEN(@SIZESTR) - @POS) AS INT);
	IF DBO.FN_HASSIZE_BY_ID(@SIZE_ID) = 0
		RETURN -2;
	IF DBO.FN_HAS_GOODS_SIZE(@GOODS_ID, @SIZE_ID) = 1
		DELETE FROM DBO.T_GOODS_SIZE_MAP WHERE GOODS_ID = @GOODS_ID AND SIZE_ID = @SIZE_ID;
	RETURN 1;
END
GO

--获取所有商品尺寸映射表
IF OBJECT_ID(N'DBO.SP_GET_GOODS_SIZE_MAP', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GET_GOODS_SIZE_MAP;
GO

CREATE PROCEDURE DBO.SP_GET_GOODS_SIZE_MAP
AS
SELECT * FROM DBO.T_GOODS_SIZE_MAP ORDER BY GOODS_SIZE_ID;
GO

--商品颜色映射表
IF OBJECT_ID(N'DBO.T_GOODS_COLOR_MAP', N'U') IS NOT NULL
DROP TABLE DBO.T_GOODS_COLOR_MAP;
GO

CREATE TABLE DBO.T_GOODS_COLOR_MAP
(
	GOODS_COLOR_ID INT IDENTITY(1,1) NOT NULL
	, GOODS_ID BIGINT NOT NULL
	, COLOR_ID INT NULL
	, THUMB_LENGTH INT NULL
	, THUMB_DATA IMAGE NULL
	, THUMB_ON DATETIME NULL
	, CONSTRAINT PK_GOODS_COLOR_ID
		PRIMARY KEY (GOODS_COLOR_ID)
	, CONSTRAINT FK_GC_MAP_GOODS_ID
		FOREIGN KEY (GOODS_ID)
		REFERENCES DBO.T_GOODSINFO(GOODS_ID)
		ON DELETE CASCADE
		ON UPDATE CASCADE
	, CONSTRAINT FK_GC_MAP_COLOR_ID
		FOREIGN KEY (COLOR_ID)
		REFERENCES DBO.T_COLOR(COLOR_ID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
GO

--是否存在对应商品颜色
IF OBJECT_ID(N'DBO.FN_HAS_GOODS_COLOR', N'FN') IS NOT NULL
DROP FUNCTION DBO.FN_HAS_GOODS_COLOR;
GO

CREATE FUNCTION DBO.FN_HAS_GOODS_COLOR (@GOODS_ID BIGINT, @COLOR_ID INT)
RETURNS INT
AS
BEGIN
	IF EXISTS (SELECT GOODS_COLOR_ID FROM DBO.T_GOODS_COLOR_MAP WHERE GOODS_ID = @GOODS_ID AND COLOR_ID = @COLOR_ID)
		RETURN 1;
	RETURN 0;
END
GO

--插入指定商品颜色映射表
IF OBJECT_ID(N'DBO.SP_ADD_GOODS_COLOR_MAP', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_ADD_GOODS_COLOR_MAP;
GO

CREATE PROCEDURE DBO.SP_ADD_GOODS_COLOR_MAP (@GOODS_ID BIGINT, @COLORSTR VARCHAR(100), @THUMB_LENGTH INT = NULL, @THUMB_DATA IMAGE = NULL)
AS
BEGIN
	SET NOCOUNT OFF
	DECLARE @COLOR_ID INT, @PREVPOS INT, @POS INT
	SET @PREVPOS = 1;
	SET @POS = CHARINDEX(N'|', @COLORSTR, 0);
	WHILE @POS <> 0
	BEGIN
		SET @COLOR_ID = CAST(SUBSTRING(@COLORSTR, @PREVPOS, @POS - @PREVPOS) AS INT);
		IF DBO.FN_HASCOLOR_BY_ID(@COLOR_ID) = 0
			RETURN -2;
		SET @PREVPOS = @POS + 1;
		SET @POS = CHARINDEX(N'|', @COLORSTR, @PREVPOS);
		IF DBO.FN_HAS_GOODS_COLOR(@GOODS_ID, @COLOR_ID) = 0
			INSERT INTO DBO.T_GOODS_COLOR_MAP (GOODS_ID, COLOR_ID, THUMB_LENGTH, THUMB_DATA, THUMB_ON) VALUES (@GOODS_ID, @COLOR_ID, @THUMB_LENGTH, @THUMB_DATA, GETDATE());
	END
	SET @COLOR_ID = CAST(SUBSTRING(@COLORSTR, @PREVPOS, LEN(@COLORSTR) - @POS) AS INT);
	IF DBO.FN_HASCOLOR_BY_ID(@COLOR_ID) = 0
		RETURN -2;
	IF DBO.FN_HAS_GOODS_COLOR(@GOODS_ID, @COLOR_ID) = 0
		INSERT INTO DBO.T_GOODS_COLOR_MAP (GOODS_ID, COLOR_ID, THUMB_LENGTH, THUMB_DATA, THUMB_ON) VALUES (@GOODS_ID, @COLOR_ID, @THUMB_LENGTH, @THUMB_DATA, GETDATE());
	RETURN 1;
END
GO

--删除指定商品颜色映射表
IF OBJECT_ID(N'DBO.SP_DEL_GOODS_COLOR_MAP', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_DEL_GOODS_COLOR_MAP;
GO

CREATE PROCEDURE DBO.SP_DEL_GOODS_COLOR_MAP (@GOODS_ID BIGINT, @COLORSTR VARCHAR(100))
AS
BEGIN
	SET NOCOUNT OFF
	DECLARE @COLOR_ID INT, @PREVPOS INT, @POS INT
	SET @PREVPOS = 1;
	SET @POS = CHARINDEX(N'|', @COLORSTR, 0);
	WHILE @POS <> 0
	BEGIN
		SET @COLOR_ID = CAST(SUBSTRING(@COLORSTR, @PREVPOS, @POS - @PREVPOS) AS INT);
		IF DBO.FN_HASCOLOR_BY_ID(@COLOR_ID) = 0
			RETURN -2;
		SET @PREVPOS = @POS + 1;
		SET @POS = CHARINDEX(N'|', @COLORSTR, @PREVPOS);
		IF DBO.FN_HAS_GOODS_COLOR(@GOODS_ID, @COLOR_ID) = 1
			DELETE FROM DBO.T_GOODS_COLOR_MAP WHERE GOODS_ID = @GOODS_ID AND COLOR_ID = @COLOR_ID;
	END
	SET @COLOR_ID = CAST(SUBSTRING(@COLORSTR, @PREVPOS, LEN(@COLORSTR) - @POS) AS INT);
	IF DBO.FN_HASCOLOR_BY_ID(@COLOR_ID) = 0
		RETURN -2;
	IF DBO.FN_HAS_GOODS_COLOR(@GOODS_ID, @COLOR_ID) = 1
		DELETE FROM DBO.T_GOODS_COLOR_MAP WHERE GOODS_ID = @GOODS_ID AND COLOR_ID = @COLOR_ID;
	RETURN 1;
END
GO

--获取所有商品颜色映射表
IF OBJECT_ID(N'DBO.SP_GET_GOODS_COLOR_MAP', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GET_GOODS_COLOR_MAP;
GO

CREATE PROCEDURE DBO.SP_GET_GOODS_COLOR_MAP
AS
SELECT * FROM DBO.T_GOODS_COLOR_MAP ORDER BY GOODS_COLOR_ID;
GO

--获取指定商品对应颜色集
IF OBJECT_ID(N'DBO.SP_GET_GOODS_COLOR_MAP_BY_GOODS_ID', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GET_GOODS_COLOR_MAP_BY_GOODS_ID;
GO

CREATE PROCEDURE DBO.SP_GET_GOODS_COLOR_MAP_BY_GOODS_ID (@GOODS_ID BIGINT)
AS
SELECT GOODS_COLOR_ID FROM DBO.T_GOODS_COLOR_MAP WHERE GOODS_ID = @GOODS_ID
GO

----商品缩略图
--IF OBJECT_ID(N'DBO.T_THUMB', N'U') IS NOT NULL
--DROP TABLE DBO.T_THUMB;
--GO

--CREATE TABLE DBO.T_THUMB
--(
--	THUMB_ID INT IDENTITY (1,1) NOT NULL
--	, GC_MAP_ID INT NOT NULL
--	, THUMB_DATA IMAGE NULL
--	, CONSTRAINT PK_THUMB
--		PRIMARY KEY (THUMB_ID)
--	, CONSTRAINT FK_GC_MAP_ID
--		FOREIGN KEY (GC_MAP_ID)
--		REFERENCES DBO.T_GOODS_COLOR_MAP(GOODS_COLOR_ID)
--		ON DELETE CASCADE
--		ON UPDATE NO ACTION
--)
--GO

----判断存在指定商品缩略图
--IF OBJECT_ID(N'DBO.IF_HASTHUMB_BY_GOODS_ID', N'IF') IS NOT NULL
--DROP FUNCTION DBO.IF_HASTHUMB_BY_GOODS_ID;
--GO

--CREATE FUNCTION DBO.IF_HASTHUMB_BY_GOODS_ID (@GOODS_ID BIGINT)
--RETURNS TABLE
--AS
--RETURN (
----SELECT THUMB.THUMB_ID, GC_MAP.COLOR_ID 
----	FROM DBO.T_THUMB AS THUMB LEFT JOIN DBO.T_GOODS_COLOR_MAP AS GC_MAP
----		ON GC_MAP.GOODS_ID = @GOODS_ID AND GC_MAP.GOODS_COLOR_ID = THUMB.THUMB_ID
----SELECT THUMB.THUMB_ID, GC_MAP.COLOR_ID, THUMB.THUMB_DATA
----	FROM DBO.T_GOODS_COLOR_MAP AS GC_MAP 
----		RIGHT JOIN DBO.T_THUMB AS THUMB 
----			ON GC_MAP.GOODS_ID = @GOODS_ID AND GC_MAP.GOODS_COLOR_ID = THUMB.THUMB_ID


--SELECT THUMB.THUMB_ID, THUMB.GC_MAP_ID INTO #THUMB_TEMP
--	FROM DBO.T_THUMB AS THUMB WHERE THUMB.GC_MAP_ID IN (
--		SELECT GC_MAP.GOODS_COLOR_ID FROM DBO.T_GOODS_COLOR_MAP AS GC_MAP  WHERE GOODS_ID = @GOODS_ID
--		);
--GO


----增加指定商品颜色缩略图
--IF OBJECT_ID(N'DBO.SP_ADD_THUMB', N'P') IS NOT NULL
--DROP PROCEDURE DBO.SP_ADD_THUMB;
--GO

--CREATE PROCEDURE DBO.SP_ADD_THUMB (@GOODS_ID BIGINT, @COLOR_ID INT, @THUMB_DATA IMAGE = NULL)
--AS
--BEGIN
--	DECLARE @GC_MAP_ID INT
--	SELECT @GC_MAP_ID = GOODS_COLOR_ID FROM DBO.T_GOODS_COLOR_MAP WHERE GOODS_ID = @GOODS_ID AND COLOR_ID = @COLOR_ID;
--	IF @GC_MAP_ID > 0
--	BEGIN
--		INSERT INTO DBO.T_THUMB (GC_MAP_ID, THUMB_DATA) VALUES(@GC_MAP_ID, @THUMB_DATA)
--	END
--	ELSE
--		RETURN -1
--END
--GO

----获取所有缩略图信息
--IF OBJECT_ID(N'DBO.SP_GETTHUMB', N'P') IS NOT NULL
--DROP PROCEDURE DBO.SP_GETTHUMB;
--GO

--CREATE PROCEDURE DBO.SP_GETTHUMB 
--AS
--SELECT * FROM DBO.T_THUMB ORDER BY THUMB_ID;
--GO

--获取指定商品信息
IF OBJECT_ID(N'DBO.SP_GETGOODSINFO_BY_ID', N'P') IS NOT NULL
DROP PROCEDURE DBO.SP_GETGOODSINFO_BY_ID;
GO

CREATE PROCEDURE DBO.SP_GETGOODSINFO_BY_ID (@ID BIGINT)
AS
SELECT * FROM DBO.T_GOODSINFO WHERE GOODS_ID = @ID;
GO

--获取指定分类商品信息列表
IF OBJECT_ID(N'DBO.P_GETGOODSINFOS_BY_FOLDER_ID', N'P') IS NOT NULL
DROP PROCEDURE DBO.P_GETGOODSINFOS_BY_FOLDER_ID;
GO

--CREATE FUNCTION DBO.IF_GETGOODSINFOS_BY_FOLDER_ID (@FLD_ID INT)
--RETURNS TABLE
--AS 
--BEGIN
--	SELECT 
--END
--GO

--交易对象
IF OBJECT_ID(N'DBO.T_TRADEUNIT', N'U') IS NOT NULL
DROP TABLE DBO.T_TRADEUNIT
GO

CREATE TABLE DBO.T_TRADEUNIT(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	TRADEID INT UNIQUE NOT NULL,
	NAME NVARCHAR(50) NOT NULL
)
GO

--部门
IF OBJECT_ID(N'DBO.T_SECTION', N'U') IS NOT NULL
DROP TABLE DBO.T_SECTION
GO

CREATE TABLE DBO.T_SECTION(
	SECTIONID INT PRIMARY KEY,
	NAME NVARCHAR(50) NOT NULL
)
GO

--门店
IF OBJECT_ID(N'DBO.T_RETAIL', N'U') IS NOT NULL
DROP TABLE DBO.T_RETAIL
GO

CREATE TABLE DBO.T_RETAIL(
	RETAILID INT PRIMARY KEY,
	NAME NVARCHAR(50) NOT NULL
)
GO


